#include "LiquidCrystal_I2C.h"
#include "Wire.h"
#include "LCD.h"

#include <SparkFunTSL2561.h>
#include <SimpleDHT.h>
#include <Rtc_Pcf8563.h>
#include <SFE_BMP180.h>

LiquidCrystal_I2C lcd( 0x3F,2,1,0,4,5,6,7);
Rtc_Pcf8563 rtc;
SFE_BMP180 pressure;
SFE_TSL2561 light;
SimpleDHT11 DHT11;

int pinDHT11 = 2;

byte temperatura = 0;
byte umiditate = 0;

char status;
double P,T;
double lux;   
boolean good;
boolean gain;     
unsigned int ms;
unsigned int data0, data1;

int x,y;
 int j=0,k=0,l=0,m=0,n=0;

//Input & Button Logic
const int numOfInputs = 2;
const int inputPins[numOfInputs] = {3,4};
int inputState[numOfInputs];
int lastInputState[numOfInputs] = {LOW,LOW};
bool inputFlags[numOfInputs] = {LOW,LOW};
long lastDebounceTime[numOfInputs] = {0,0};
long debounceDelay = 5;

const int numOfScreens = 5;
int currentScreen = 0;
String screens[numOfScreens][2] = {{"     Data si Ora","      "}, {"Temperatura", " grade Celsius"}, 
{"Presiune atmosferica"," mmHg"},{"Umiditatea aerului"," %"}, {"Intensitatea luminii", " lux"}};
double parameters[numOfScreens];

void setup() {
  for(int i = 0; i < numOfInputs; i++)
  {
    pinMode(inputPins[i], INPUT);
    digitalWrite(inputPins[i], HIGH);
  }
  
   lcd.begin (20,4);
   lcd.setBacklightPin(3,POSITIVE); 
   lcd.setBacklight(HIGH);
   
   pressure.begin();
   light.begin();
   
   rtc.initClock();
   //day, weekday, month, century, year
   rtc.setDate(9, 3, 1, 0, 19);
   //hr, min, sec
   rtc.setTime(19, 00, 00);

   gain = 0;                      //pentru senzor de lumina
   unsigned char time = 2;        //cel mai mic timp din setarile librariei 
   
   light.setTiming(gain,time,ms);
   light.setPowerUp();
}

void loop() {
  ButtonPress();
  ButtonRead();
  if(currentScreen==4)
 { pickFunction(currentScreen);
  //delay(100);
 }
 else
 {lcd.clear();
 printScreen();
  delay(10);
  
 }
}

void ButtonPress() {
  for(int i = 0; i < numOfInputs; i++) {
    int reading = digitalRead(inputPins[i]);
    if (reading != lastInputState[i]) {
      lastDebounceTime[i] = millis();
    }
    if ((millis() - lastDebounceTime[i]) > debounceDelay) {
      if (reading != inputState[i]) {
        inputState[i] = reading;
        if (inputState[i] == HIGH) {
          inputFlags[i] = HIGH;
        }
      }
    }
    lastInputState[i] = reading;
  }
}

void ButtonRead() {
  for(int i = 0; i < numOfInputs; i++) {
    if(inputFlags[i] == HIGH) {
      inputAction(i);
      inputFlags[i] = LOW;
    }
  }
}

void inputAction(int input) {
  if(input == 0) {
    if (currentScreen == 0) {
      currentScreen = numOfScreens-1;
    }else{
      currentScreen--;
    }
  }else if(input == 1) {
    if (currentScreen == numOfScreens-1) {
      currentScreen = 0;
    }else{
      currentScreen++;
    }
  }

}

void printScreen() {
  
  lcd.print(screens[currentScreen][0]);
  lcd.setCursor(0,1);
  if(currentScreen!=4)
  pickFunction(currentScreen);
 }

 void pickFunction(int number)
 {
  switch(number){
    case 0:
    ShowTime();
    break;
    
    case 1:
    ShowTemperature();
    break;
    
    case 2:
    ShowPressure();
    break;
    
    case 3:
    ShowHumidity();
    break;
    
    default:
    ShowLightIntensity();
    break;
  }
  }
  
  void ShowTime()
 {
   lcd.print(screens[currentScreen][1]);
   lcd.print(rtc.formatTime());
   delay(5);
   lcd.setCursor(0, 2);
   lcd.print("     ");
   lcd.print(rtc.formatDate(RTCC_DATE_WORLD));
   
   lcd.print(screens[currentScreen][1]);
    delay(20);
   
 }
 
  void ShowTemperature()
 {
 if(m==2)
  m=0;
  if(m==0){
   status = pressure.startTemperature();
  if (status != 0)
  {
    delay(status);
    status = pressure.getTemperature(T);
    if (status != 0)
    {
      lcd.print(T,2);
      delay(15);
    //  lcd.setCursor(0, 2);
      lcd.print(screens[currentScreen][1]);
      delay(25);
    }
  }
  
 }m++;

 }
  void ShowPressure()
  {
   
   if(n==1)
   n=0;
    if(n==0)
    { status = pressure.startTemperature();
  if (status != 0)
  {
    delay(status);
    status = pressure.getTemperature(T);
    { status = pressure.startPressure(3);
      if (status != 0)
      { 
        delay(status);
     
        status = pressure.getPressure(P,T);
        if (status != 0)
        {
          lcd.print(P*0.750062,3);
          delay(15);
         // lcd.setCursor(0, 2);
          lcd.print(screens[currentScreen][1]);
          delay(30);
          
          
        }
     }
      
  }
  }
  
    }
    n++;

  }

  void ShowHumidity()
  {
    
   if(k==10)
k=0;

 if(k==0)
     {
      DHT11.read(pinDHT11, &temperatura, &umiditate, NULL);
      x = (int)temperatura;
      y = (int)umiditate;
     }
     delay(10);
     lcd.print(y);
    k++;
   // lcd.setCursor(0, 2);
    
     lcd.print(screens[currentScreen][1]);
     delay(30);
  }

  void ShowLightIntensity()
  {
    
      if(l==15)
        l=0;
          if(l==0){
            
            delay(ms);
             lcd.clear();
             lcd.print(screens[currentScreen][0]);
             lcd.setCursor(0,1);
             light.getData(data0,data1);
              
             good = light.getLux(gain,ms,data0,data1,lux);
             lcd.print(lux);
             lcd.print(screens[currentScreen][1]);
             lcd.setCursor(0, 2);
           
             
              if(lux>20000)
              lcd.print("Foarte insorit");
              else

              if(lux>1200)
              lcd.print("Insorit");
              else

              if(lux > 700 && lux <1000 )
              lcd.print("Innorat");
              else

              if(lux>320  &&  lux<500)
             { //lcd.print("Apus  /   Rasarit");
             // lcd.setCursor(0, 3);
              lcd.print("Lumina interioara");
             }else

              if(lux<50)
              lcd.print("Intunecat");
              else
               if(lux > 50 && lux <320 )
              lcd.print("Foarte innorat");

               
             }
           l++;
             
  }
  
  

 
 
 
 
